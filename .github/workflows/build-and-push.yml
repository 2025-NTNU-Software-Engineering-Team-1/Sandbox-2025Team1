name: Build & Push Sandbox Images

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  GAR_LOCATION: asia-east1
  GAR_REPOSITORY: sandbox
  SANDBOX_IMAGE_NAME: noj-sandbox
  CCPP_IMAGE_NAME: noj-c-cpp
  PY3_IMAGE_NAME: noj-py3

jobs:
  test:
    name: CI Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Determine sandbox directory
        run: |
          if [ -d Sandbox ]; then
            echo "SANDBOX_DIR=Sandbox" >> "$GITHUB_ENV"
          else
            echo "SANDBOX_DIR=." >> "$GITHUB_ENV"
          fi
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      - name: Upgrade pip
        run: python -m pip install --upgrade pip
      - name: Install dependencies for tests
        run: |
          pip install -r "$SANDBOX_DIR/requirements.txt"
          if [ -f "$SANDBOX_DIR/tests/requirements.txt" ]; then
            pip install -r "$SANDBOX_DIR/tests/requirements.txt"
          fi
      - name: Build sandbox assets for tests
        run: |
          cd "$SANDBOX_DIR"
          ./build.sh
      - name: Run unit tests
        run: |
          cd "$SANDBOX_DIR"
          pytest -v

  build-and-push:
    name: Build & Push Images
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - uses: actions/checkout@v4
      - name: Determine sandbox directory
        run: |
          if [ -d Sandbox ]; then
            echo "SANDBOX_DIR=Sandbox" >> "$GITHUB_ENV"
          else
            echo "SANDBOX_DIR=." >> "$GITHUB_ENV"
          fi
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_ARTIFACT_REGISTRY_KEY }}
      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
      - name: Configure Docker auth
        run: gcloud auth configure-docker "${GAR_LOCATION}-docker.pkg.dev"
      - name: Prepare sandbox assets
        run: |
          cd "$SANDBOX_DIR"
          ./build.sh
      - name: Compose image metadata
        run: |
          PROJECT="${{ secrets.GCP_PROJECT_ID }}"
          BASE_URI="${GAR_LOCATION}-docker.pkg.dev/${PROJECT}/${GAR_REPOSITORY}"
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            IMAGE_TAG="${GITHUB_REF#refs/tags/}"
          else
            IMAGE_TAG="${GITHUB_SHA}"
          fi
          echo "PROJECT=${PROJECT}" >> "${GITHUB_ENV}"
          echo "BASE_URI=${BASE_URI}" >> "${GITHUB_ENV}"
          echo "IMAGE_TAG=${IMAGE_TAG}" >> "${GITHUB_ENV}"
      - name: Build sandbox API image
        run: |
          docker build \
            -f "$SANDBOX_DIR/Dockerfile.prod" \
            -t "${BASE_URI}/${SANDBOX_IMAGE_NAME}:${IMAGE_TAG}" \
            "$SANDBOX_DIR"
      - name: Build C/C++ runner image
        run: |
          docker build \
            -f "$SANDBOX_DIR/c_cpp_dockerfile" \
            -t "${BASE_URI}/${CCPP_IMAGE_NAME}:${IMAGE_TAG}" \
            "$SANDBOX_DIR"
      - name: Build Python runner image
        run: |
          docker build \
            -f "$SANDBOX_DIR/python3_dockerfile" \
            -t "${BASE_URI}/${PY3_IMAGE_NAME}:${IMAGE_TAG}" \
            "$SANDBOX_DIR"
      - name: Push images
        run: |
          docker push "${BASE_URI}/${SANDBOX_IMAGE_NAME}:${IMAGE_TAG}"
          docker push "${BASE_URI}/${CCPP_IMAGE_NAME}:${IMAGE_TAG}"
          docker push "${BASE_URI}/${PY3_IMAGE_NAME}:${IMAGE_TAG}"
      - name: Tag & push latest (main branch only)
        if: github.ref == 'refs/heads/main'
        run: |
          docker tag "${BASE_URI}/${SANDBOX_IMAGE_NAME}:${IMAGE_TAG}" "${BASE_URI}/${SANDBOX_IMAGE_NAME}:latest"
          docker tag "${BASE_URI}/${CCPP_IMAGE_NAME}:${IMAGE_TAG}" "${BASE_URI}/${CCPP_IMAGE_NAME}:latest"
          docker tag "${BASE_URI}/${PY3_IMAGE_NAME}:${IMAGE_TAG}" "${BASE_URI}/${PY3_IMAGE_NAME}:latest"
          docker push "${BASE_URI}/${SANDBOX_IMAGE_NAME}:latest"
          docker push "${BASE_URI}/${CCPP_IMAGE_NAME}:latest"
          docker push "${BASE_URI}/${PY3_IMAGE_NAME}:latest"
